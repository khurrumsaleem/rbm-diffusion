#include "rbm/rbm.hpp"
#include "unit_test_framework.hpp"
#include "xtensor/xbuilder.hpp"
#include "xtensor/xmath.hpp"
#include "xtensor/xview.hpp"
#include <fstream>
#include <tuple>
#include <xtensor-blas/xlinalg.hpp>
#include <xtensor/xarray.hpp>
#include <xtensor/xcsv.hpp>

TEST(test_pcaReduce_1)
{
  // Read in Iris data
  std::ifstream file_in;
  file_in.open("../../tests/supporting/iris.csv");
  xt::xarray<double> data = xt::load_csv<double>(file_in);
  file_in.close();

  // Initialize object for PCA
  rbm::Perturb object;

  // Set size of reduced subspace to 2 PCs
  object.setNumPCs(2);

  // Run pcaReduce on Iris data
  object.pcaReduce(data);

  // Read in the expected uncentered data from sklearn.decomposition.PCA
  file_in.open("../../tests/supporting/iris_pcas.csv");
  xt::xarray<double> expected_data = xt::load_csv<double>(file_in);
  file_in.close();

  // Calculate rank of reduced data
  size_t rank = xt::linalg::matrix_rank(data);
  size_t expected_rank = xt::linalg::matrix_rank(expected_data);
  ASSERT_EQUAL(rank, expected_rank);

  // Assert the local_pcs are the same generated by sklearn.decomposition.PCA
  for (size_t i = 0; i < data.shape(0); i++) {
    for (size_t j = 0; j < data.shape(1); j++) {
      ASSERT_ALMOST_EQUAL(data(i, j), expected_data(i, j), 1e-13);
    }
  }
}

TEST_MAIN();
